const mongoose = require('mongoose');
const Contest = require('../models/Contest');
const {stripIndent} = require('common-tags');

mongoose.Promise = global.Promise;

(async () => {
	await mongoose.connect('mongodb://localhost:27017/esolang-battle');

	const contest = new Contest({
		name: 'Language Implementation Hackathon 2018',
		id: 'hackathon2018',
		start: new Date('2018-09-23T12:00:00+0900'),
		end: new Date('2018-09-23T18:00:00+0900'),
		description: {
			ja: stripIndent`
				\`\`\`
				入力された数値列のアップダウンを求めよ
				\`\`\`

				## 入力

				* 0から9までの整数101個が、連結されて与えられる。
				* 入力は正規表現 \`^\\d{101}$\` で表現される。
				* 入力の最後には改行が付与される。

				## 出力

				* n番目の数字 (1 <= n <= 100) について、n+1番目の数字がn番目の数字より大きければ1を、小さければ0を出力せよ。
				* 都合100個の数字が出力される。
				* 出力された文字列に含まれる空白文字はすべて無視される。

				## 制約

				* 同じ数字が2個以上連続して出現することはない。
				* 入力には部分数値列「0123456789」および「9876543210」がそれぞれ1回以上出現する。

				## 例1

				### 入力

				\`\`\`
				01234567898765432101234567898765432101234567898765432101234567898765432101234567898765432101234567898
				\`\`\`

				### 出力

				\`\`\`
				1111111110000000001111111110000000001111111110000000001111111110000000001111111110000000001111111110
				\`\`\`

				## 例2

				### 入力

				\`\`\`
				76720263929876543210356929483103180240696765792986012538389832979578530374570123456789210847329354846
				\`\`\`

				### 出力

				\`\`\`
				0100110101000000000111101010001010110110100110100011101011000101011000110110111111111000101001010101
				\`\`\`
			`,
			en: '',
		},
	});
	await contest.save();

	mongoose.connection.close();
})();
